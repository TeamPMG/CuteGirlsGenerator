{
  "inputs": [
    "Variable360"
  ],
  "outputs": [
    "Variable393"
  ],
  "memory_layout": {
    "static": {
      "size": -1,
      "allocations": {
        "Variable366": {
          "name": "Variable366",
          "offset": -1,
          "size": 60,
          "width": 60,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable410": {
          "name": "Variable410",
          "offset": -1,
          "size": 34560,
          "width": 9,
          "height": 960,
          "channel_mode": "RGBA"
        },
        "ConstantVariable268": {
          "name": "ConstantVariable268",
          "offset": -1,
          "size": 7680,
          "width": 60,
          "height": 128,
          "channel_mode": "R"
        },
        "Variable416": {
          "name": "Variable416",
          "offset": -1,
          "size": 138240,
          "width": 36,
          "height": 960,
          "channel_mode": "RGBA"
        },
        "ConstantVariable317": {
          "name": "ConstantVariable317",
          "offset": -1,
          "size": 432,
          "width": 36,
          "height": 3,
          "channel_mode": "RGBA"
        },
        "Variable362": {
          "name": "Variable362",
          "offset": -1,
          "size": 128,
          "width": 128,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable274": {
          "name": "ConstantVariable274",
          "offset": -1,
          "size": 3840,
          "width": 3840,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable361": {
          "name": "Variable361",
          "offset": -1,
          "size": 128,
          "width": 128,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable379": {
          "name": "Variable379",
          "offset": -1,
          "size": 122880,
          "width": 4096,
          "height": 30,
          "channel_mode": "R"
        },
        "ConstantVariable270": {
          "name": "ConstantVariable270",
          "offset": -1,
          "size": 14400,
          "width": 240,
          "height": 60,
          "channel_mode": "R"
        },
        "Variable363": {
          "name": "Variable363",
          "offset": -1,
          "size": 128,
          "width": 128,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable389": {
          "name": "Variable389",
          "offset": -1,
          "size": 16384,
          "width": 4096,
          "height": 4,
          "channel_mode": "R"
        },
        "Variable400": {
          "name": "Variable400",
          "offset": -1,
          "size": 122880,
          "width": 4096,
          "height": 30,
          "channel_mode": "R"
        },
        "ConstantVariable316": {
          "name": "ConstantVariable316",
          "offset": -1,
          "size": 4608,
          "width": 72,
          "height": 16,
          "channel_mode": "RGBA"
        },
        "ConstantVariable314": {
          "name": "ConstantVariable314",
          "offset": -1,
          "size": 4608,
          "width": 9,
          "height": 128,
          "channel_mode": "RGBA"
        },
        "ConstantVariable271": {
          "name": "ConstantVariable271",
          "offset": -1,
          "size": 240,
          "width": 240,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable381": {
          "name": "Variable381",
          "offset": -1,
          "size": 32768,
          "width": 4096,
          "height": 8,
          "channel_mode": "R"
        },
        "Variable368": {
          "name": "Variable368",
          "offset": -1,
          "size": 240,
          "width": 240,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable369": {
          "name": "Variable369",
          "offset": -1,
          "size": 240,
          "width": 240,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable391": {
          "name": "Variable391",
          "offset": -1,
          "size": 2880,
          "width": 2880,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable365": {
          "name": "Variable365",
          "offset": -1,
          "size": 60,
          "width": 60,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable272": {
          "name": "ConstantVariable272",
          "offset": -1,
          "size": 921600,
          "width": 3840,
          "height": 240,
          "channel_mode": "R"
        },
        "Variable360": {
          "name": "Variable360",
          "offset": -1,
          "size": 100,
          "width": 100,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable403": {
          "name": "Variable403",
          "offset": -1,
          "size": 3840,
          "width": 3840,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable278": {
          "name": "ConstantVariable278",
          "offset": -1,
          "size": 128,
          "width": 128,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable304": {
          "name": "ConstantVariable304",
          "offset": -1,
          "size": 16,
          "width": 16,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable397": {
          "name": "Variable397",
          "offset": -1,
          "size": 32768,
          "width": 4096,
          "height": 8,
          "channel_mode": "R"
        },
        "ConstantVariable313": {
          "name": "ConstantVariable313",
          "offset": -1,
          "size": 3840,
          "width": 3840,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable414": {
          "name": "Variable414",
          "offset": -1,
          "size": 276480,
          "width": 72,
          "height": 960,
          "channel_mode": "RGBA"
        },
        "Variable394": {
          "name": "Variable394",
          "offset": -1,
          "size": 16384,
          "width": 4096,
          "height": 4,
          "channel_mode": "R"
        },
        "Variable386": {
          "name": "Variable386",
          "offset": -1,
          "size": 16384,
          "width": 4096,
          "height": 4,
          "channel_mode": "R"
        },
        "Variable367": {
          "name": "Variable367",
          "offset": -1,
          "size": 240,
          "width": 240,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable370": {
          "name": "Variable370",
          "offset": -1,
          "size": 3840,
          "width": 3840,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable392": {
          "name": "Variable392",
          "offset": -1,
          "size": 2880,
          "width": 2880,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable269": {
          "name": "ConstantVariable269",
          "offset": -1,
          "size": 60,
          "width": 60,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable307": {
          "name": "ConstantVariable307",
          "offset": -1,
          "size": 32,
          "width": 32,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable376": {
          "name": "Variable376",
          "offset": -1,
          "size": 122880,
          "width": 4096,
          "height": 30,
          "channel_mode": "R"
        },
        "Variable412": {
          "name": "Variable412",
          "offset": -1,
          "size": 1105920,
          "width": 288,
          "height": 960,
          "channel_mode": "RGBA"
        },
        "ConstantVariable267": {
          "name": "ConstantVariable267",
          "offset": -1,
          "size": 128,
          "width": 128,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable384": {
          "name": "Variable384",
          "offset": -1,
          "size": 32768,
          "width": 4096,
          "height": 8,
          "channel_mode": "R"
        },
        "ConstantVariable282": {
          "name": "ConstantVariable282",
          "offset": -1,
          "size": 32,
          "width": 32,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable373": {
          "name": "Variable373",
          "offset": -1,
          "size": 3840,
          "width": 3840,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable364": {
          "name": "Variable364",
          "offset": -1,
          "size": 60,
          "width": 60,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable289": {
          "name": "ConstantVariable289",
          "offset": -1,
          "size": 3,
          "width": 3,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable315": {
          "name": "ConstantVariable315",
          "offset": -1,
          "size": 36864,
          "width": 288,
          "height": 32,
          "channel_mode": "RGBA"
        },
        "ConstantVariable266": {
          "name": "ConstantVariable266",
          "offset": -1,
          "size": 12800,
          "width": 128,
          "height": 100,
          "channel_mode": "R"
        },
        "ConstantVariable310": {
          "name": "ConstantVariable310",
          "offset": -1,
          "size": 128,
          "width": 128,
          "height": 1,
          "channel_mode": "R"
        },
        "Variable393": {
          "name": "Variable393",
          "offset": -1,
          "size": 2880,
          "width": 2880,
          "height": 1,
          "channel_mode": "R"
        },
        "ConstantVariable286": {
          "name": "ConstantVariable286",
          "offset": -1,
          "size": 16,
          "width": 16,
          "height": 1,
          "channel_mode": "R"
        }
      }
    },
    "dynamic": {
      "size": -1,
      "allocations": {}
    },
    "mapping": {
      "Variable360": "Variable360",
      "Variable361": "Variable361",
      "Variable362": "Variable362",
      "Variable363": "Variable363",
      "Variable364": "Variable364",
      "Variable365": "Variable365",
      "Variable366": "Variable366",
      "Variable367": "Variable367",
      "Variable368": "Variable368",
      "Variable369": "Variable369",
      "Variable370": "Variable370",
      "Variable403": "Variable403",
      "Variable373": "Variable373",
      "Variable374": "Variable370",
      "Variable375": "Variable403",
      "Variable410": "Variable410",
      "Variable376": "Variable376",
      "Variable400": "Variable400",
      "Variable379": "Variable379",
      "Variable380": "Variable376",
      "Variable412": "Variable412",
      "Variable381": "Variable381",
      "Variable397": "Variable397",
      "Variable384": "Variable384",
      "Variable385": "Variable381",
      "Variable414": "Variable414",
      "Variable386": "Variable386",
      "Variable394": "Variable394",
      "Variable389": "Variable389",
      "Variable390": "Variable386",
      "Variable416": "Variable416",
      "Variable391": "Variable391",
      "Variable392": "Variable392",
      "Variable393": "Variable393",
      "ConstantVariable266": "ConstantVariable266",
      "ConstantVariable267": "ConstantVariable267",
      "ConstantVariable268": "ConstantVariable268",
      "ConstantVariable269": "ConstantVariable269",
      "ConstantVariable270": "ConstantVariable270",
      "ConstantVariable271": "ConstantVariable271",
      "ConstantVariable272": "ConstantVariable272",
      "ConstantVariable274": "ConstantVariable274",
      "ConstantVariable313": "ConstantVariable313",
      "ConstantVariable314": "ConstantVariable314",
      "ConstantVariable278": "ConstantVariable278",
      "ConstantVariable310": "ConstantVariable310",
      "ConstantVariable315": "ConstantVariable315",
      "ConstantVariable282": "ConstantVariable282",
      "ConstantVariable307": "ConstantVariable307",
      "ConstantVariable316": "ConstantVariable316",
      "ConstantVariable286": "ConstantVariable286",
      "ConstantVariable304": "ConstantVariable304",
      "ConstantVariable317": "ConstantVariable317",
      "ConstantVariable289": "ConstantVariable289"
    }
  },
  "weight_encoding": "raw",
  "placeholders": [],
  "shader_sources": {
    "sgemm_7b6a34fc2f768654738764011c33f0367d6cb5a14554db852e4bcd88": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D A;\nuniform sampler2D B;\n\nuniform vec2 s_c;\nuniform vec2 d_C;\nuniform vec2 s_C;\n\nuniform vec2 d_a;\nuniform vec2 d_b;\n\nvoid main() {\n    ivec2 p_C = convert_position_i(gl_FragCoord.xy, s_c, s_C, d_C);\n    \n    int m = p_C.x;\n    int n = p_C.y;\n\n    float v = 0.0;\n\n    for (int k = 0; k < 100; k++) {\n        float v_a = texture2D(A, fract((vec2(k, m) + 0.5) / d_a)).r;\n        float v_b = texture2D(B, fract((vec2(n, k) + 0.5) / d_b)).r;\n\n        v += v_a * v_b;\n    }\n\n    gl_FragColor = vec4(v, 0, 0, 0);\n}\n",
    "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform vec2 texture_stride_y;\nuniform vec4 variable_shape_y;\nuniform vec4 variable_stride_y;\n\n\nuniform sampler2D sampler_x0;\nuniform vec2 texture_shape_x0;\nuniform vec2 texture_stride_x0;\nuniform vec4 variable_shape_x0;\nuniform vec4 variable_stride_x0;\n\n\nuniform sampler2D sampler_x1;\nuniform vec2 texture_shape_x1;\nuniform vec2 texture_stride_x1;\nuniform vec4 variable_shape_x1;\nuniform vec4 variable_stride_x1;\n\n\nvoid main() {\n    float y;\n\n    vec4 variable_position_y = convert_position(gl_FragCoord.xy, texture_stride_y, variable_stride_y, variable_shape_y);    \n\n\nvec4 variable_position_x0 = mod(variable_position_y, variable_shape_x0);\nvec2 texture_position_x0 = convert_coord(variable_position_x0, variable_stride_x0, texture_stride_x0, texture_shape_x0);\nfloat x0 = texture2D(sampler_x0, texture_position_x0).r;\n\n\nvec4 variable_position_x1 = mod(variable_position_y, variable_shape_x1);\nvec2 texture_position_x1 = convert_coord(variable_position_x1, variable_stride_x1, texture_stride_x1, texture_shape_x1);\nfloat x1 = texture2D(sampler_x1, texture_position_x1).r;\ny = x0 + x1;\n\n    gl_FragColor = vec4(y, 0, 0, 0);\n}\n",
    "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D sampler_x0;\nuniform vec2 texture_shape_x0;\n    \n\nvoid main() {\n    float y;\n\n\nfloat x0 = texture2D(sampler_x0, gl_FragCoord.xy / texture_shape_x0).r;\n\nfloat v = exp(-2.0*abs(x0));\ny = (1.0 - v) / (1.0 + v) * sign(x0);\n\n\n    gl_FragColor = vec4(y, 0, 0, 0);\n}\n",
    "sgemm_f1f0a0317d0a05dc6fcdf94285cb71972521ae68a99923b188c4212e": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D A;\nuniform sampler2D B;\n\nuniform vec2 s_c;\nuniform vec2 d_C;\nuniform vec2 s_C;\n\nuniform vec2 d_a;\nuniform vec2 d_b;\n\nvoid main() {\n    ivec2 p_C = convert_position_i(gl_FragCoord.xy, s_c, s_C, d_C);\n    \n    int m = p_C.x;\n    int n = p_C.y;\n\n    float v = 0.0;\n\n    for (int k = 0; k < 128; k++) {\n        float v_a = texture2D(A, fract((vec2(k, m) + 0.5) / d_a)).r;\n        float v_b = texture2D(B, fract((vec2(n, k) + 0.5) / d_b)).r;\n\n        v += v_a * v_b;\n    }\n\n    gl_FragColor = vec4(v, 0, 0, 0);\n}\n",
    "sgemm_8e61680a9d17f474ddcca73703dfef2ad11e56858575df840c9b9e6f": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D A;\nuniform sampler2D B;\n\nuniform vec2 s_c;\nuniform vec2 d_C;\nuniform vec2 s_C;\n\nuniform vec2 d_a;\nuniform vec2 d_b;\n\nvoid main() {\n    ivec2 p_C = convert_position_i(gl_FragCoord.xy, s_c, s_C, d_C);\n    \n    int m = p_C.x;\n    int n = p_C.y;\n\n    float v = 0.0;\n\n    for (int k = 0; k < 60; k++) {\n        float v_a = texture2D(A, fract((vec2(k, m) + 0.5) / d_a)).r;\n        float v_b = texture2D(B, fract((vec2(n, k) + 0.5) / d_b)).r;\n\n        v += v_a * v_b;\n    }\n\n    gl_FragColor = vec4(v, 0, 0, 0);\n}\n",
    "sgemm_0c6a55f6b6212c47c90844ed8008be4ccd3c7b116ff331d69814a52a": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D A;\nuniform sampler2D B;\n\nuniform vec2 s_c;\nuniform vec2 d_C;\nuniform vec2 s_C;\n\nuniform vec2 d_a;\nuniform vec2 d_b;\n\nvoid main() {\n    ivec2 p_C = convert_position_i(gl_FragCoord.xy, s_c, s_C, d_C);\n    \n    int m = p_C.x;\n    int n = p_C.y;\n\n    float v = 0.0;\n\n    for (int k = 0; k < 240; k++) {\n        float v_a = texture2D(A, fract((vec2(k, m) + 0.5) / d_a)).r;\n        float v_b = texture2D(B, fract((vec2(n, k) + 0.5) / d_b)).r;\n\n        v += v_a * v_b;\n    }\n\n    gl_FragColor = vec4(v, 0, 0, 0);\n}\n",
    "elementwisemul_0843eb40eebccad40d17c8a426b64fe8d652bb725c8950854bc6bea1": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform vec2 texture_stride_y;\nuniform vec4 variable_shape_y;\nuniform vec4 variable_stride_y;\n\n\nuniform sampler2D sampler_x0;\nuniform vec2 texture_shape_x0;\nuniform vec2 texture_stride_x0;\nuniform vec4 variable_shape_x0;\nuniform vec4 variable_stride_x0;\n\n\nuniform sampler2D sampler_x1;\nuniform vec2 texture_shape_x1;\nuniform vec2 texture_stride_x1;\nuniform vec4 variable_shape_x1;\nuniform vec4 variable_stride_x1;\n\n\nvoid main() {\n    float y;\n\n    vec4 variable_position_y = convert_position(gl_FragCoord.xy, texture_stride_y, variable_stride_y, variable_shape_y);    \n\n\nvec4 variable_position_x0 = mod(variable_position_y, variable_shape_x0);\nvec2 texture_position_x0 = convert_coord(variable_position_x0, variable_stride_x0, texture_stride_x0, texture_shape_x0);\nfloat x0 = texture2D(sampler_x0, texture_position_x0).r;\n\n\nvec4 variable_position_x1 = mod(variable_position_y, variable_shape_x1);\nvec2 texture_position_x1 = convert_coord(variable_position_x1, variable_stride_x1, texture_stride_x1, texture_shape_x1);\nfloat x1 = texture2D(sampler_x1, texture_position_x1).r;\ny = x0 * x1;\n\n    gl_FragColor = vec4(y, 0, 0, 0);\n}\n",
    "reshape_4c29b12b0d5407a59038acc11bd8c169f7e7e7758be69c25c9b25116": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D X;\n\nuniform vec2 s_y;\n\nuniform vec2 d_x;\nuniform vec2 s_x;\n\nvoid main() {\n    float x = texture2D(X, fract((floor((dot(gl_FragCoord.xy - 0.5, s_y) + 0.5) / s_x) + 0.5) / d_x)).r;\n    gl_FragColor = vec4(x, 0, 0, 0);\n}\n",
    "im2col_bf18af203407aa8ca8842eedd9a394a955a522d5e39ea8fb17d0e394": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D im;\n\nuniform vec2 s_col;\nuniform vec4 d_Col;\nuniform vec4 s_Col;\n\nuniform vec2 d_im;\nuniform vec2 s_im;\nuniform vec4 d_Im;\nuniform vec4 s_Im;\n\nuniform int C1;\nuniform int H1;\nuniform int W1;\nuniform int KH;\nuniform int KW;\nuniform int DH;\nuniform int DW;\nuniform int SH;\nuniform int SW;\nuniform int PH;\nuniform int PW;\n\nvoid main() {\n    ivec4 p_Col = convert_position_i(gl_FragCoord.xy, s_col, s_Col, d_Col);\n\n    int n  = p_Col.x;\n    int h2 = p_Col.y;\n    int w2 = p_Col.z;\n    int khkwc1 = p_Col.w;\n    int kh = khkwc1 / C1 / KW;\n    int kw = khkwc1 / C1 - kh * KW;\n    int c1 = khkwc1 - (kh * KW + kw) * C1;\n\n    int h1 = h2 * SH - PH + kh * DH;\n    int w1 = w2 * SW - PW + kw * DW;\n\n    float v0 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0.0 : texture2D(im, convert_coord(vec4(n, h1, w1, c1 + 0) + 0.5, s_Im, s_im, d_im)).r;\n    float v1 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0.0 : texture2D(im, convert_coord(vec4(n, h1, w1, c1 + 1) + 0.5, s_Im, s_im, d_im)).r;\n    float v2 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0.0 : texture2D(im, convert_coord(vec4(n, h1, w1, c1 + 2) + 0.5, s_Im, s_im, d_im)).r;\n    float v3 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0.0 : texture2D(im, convert_coord(vec4(n, h1, w1, c1 + 3) + 0.5, s_Im, s_im, d_im)).r;\n    \n    gl_FragColor = vec4(v0, v1, v2, v3);\n\n}\n",
    "sgemm_b208349e276476df383e78bc4bdf95e8d2445feb65fc8bfe7fa85fb6": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D A;\nuniform sampler2D B;\n\nuniform vec2 s_c;\nuniform vec2 d_C;\nuniform vec2 s_C;\n\nuniform vec2 d_a;\nuniform vec2 d_b;\n\nvoid main() {\n    ivec2 p_C = convert_position_i(gl_FragCoord.xy, s_c, s_C, d_C);\n    \n    int m = p_C.x;\n    int n = p_C.y;\n\n    float v = 0.0;\n\n    for (int k = 0; k < 9; k++) {\n        vec4 v_a = texture2D(A, fract((vec2(k, m) + 0.5) / d_a));\n        vec4 v_b = texture2D(B, fract((vec2(k, n) + 0.5) / d_b));\n\n        v += dot(v_a, v_b);\n    }\n\n    gl_FragColor = vec4(v, 0, 0, 0);\n}\n",
    "sgemm_e643fccc0088cd8cc9d77b91dc3ec081c2f6ed7270838453506f34bd": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D A;\nuniform sampler2D B;\n\nuniform vec2 s_c;\nuniform vec2 d_C;\nuniform vec2 s_C;\n\nuniform vec2 d_a;\nuniform vec2 d_b;\n\nvoid main() {\n    ivec2 p_C = convert_position_i(gl_FragCoord.xy, s_c, s_C, d_C);\n    \n    int m = p_C.x;\n    int n = p_C.y;\n\n    float v = 0.0;\n\n    for (int k = 0; k < 288; k++) {\n        vec4 v_a = texture2D(A, fract((vec2(k, m) + 0.5) / d_a));\n        vec4 v_b = texture2D(B, fract((vec2(k, n) + 0.5) / d_b));\n\n        v += dot(v_a, v_b);\n    }\n\n    gl_FragColor = vec4(v, 0, 0, 0);\n}\n",
    "sgemm_be6f3d0bfc479223892a338b15fbd40e56dc9512a524f1864c86cd0a": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D A;\nuniform sampler2D B;\n\nuniform vec2 s_c;\nuniform vec2 d_C;\nuniform vec2 s_C;\n\nuniform vec2 d_a;\nuniform vec2 d_b;\n\nvoid main() {\n    ivec2 p_C = convert_position_i(gl_FragCoord.xy, s_c, s_C, d_C);\n    \n    int m = p_C.x;\n    int n = p_C.y;\n\n    float v = 0.0;\n\n    for (int k = 0; k < 72; k++) {\n        vec4 v_a = texture2D(A, fract((vec2(k, m) + 0.5) / d_a));\n        vec4 v_b = texture2D(B, fract((vec2(k, n) + 0.5) / d_b));\n\n        v += dot(v_a, v_b);\n    }\n\n    gl_FragColor = vec4(v, 0, 0, 0);\n}\n",
    "sgemm_dc47d3b3cb5bfd62d19e9e4364684293048c98f032601cfd8a2e0d73": "\nprecision highp float;\nprecision highp int;\n\nint mod(int x, int p) { return x-(x/p)*p; }\nivec2 mod(int x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(int x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(int x, ivec4 p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, int p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, int p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, int p) { return x-(x/p)*p; }\nivec2 mod(ivec2 x, ivec2 p) { return x-(x/p)*p; }\nivec3 mod(ivec3 x, ivec3 p) { return x-(x/p)*p; }\nivec4 mod(ivec4 x, ivec4 p) { return x-(x/p)*p; }\n\nivec2 convert_position_i(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    ivec2 ind_partial = ivec2(p1) * ivec2(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    ivec3 ind_partial = ivec3(p1) * ivec3(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec2 convert_position_i(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec2 s2i = ivec2(s2);\n    ivec2 d2i = ivec2(d2);\n\n    ivec2 index;\n    ivec2 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec2 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec3 convert_position_i(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec3 s2i = ivec3(s2);\n    ivec3 d2i = ivec3(d2);\n\n    ivec3 index;\n    ivec3 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec3 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\nivec4 convert_position_i(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    ivec4 ind_partial = ivec4(p1) * ivec4(s1);\n    ivec4 s2i = ivec4(s2);\n    ivec4 d2i = ivec4(d2);\n\n    ivec4 index;\n    ivec4 p2i;\n    \n    index *= 0;\n    p2i *= 0;\n\n    ivec4 m;\n    \n            index += ind_partial[0];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[1];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[2];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n            index += ind_partial[3];\n            m = index / s2i;\n            p2i += m;\n            index -= m*s2i;\n        \n\n    return p2i-(p2i/d2i)*d2i;\n}\n\n\nvec2 convert_position(vec2 p1, vec2 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec2 p1, vec2 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec2 p1, vec2 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec3 p1, vec3 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec3 p1, vec3 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec3 p1, vec3 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec2 convert_position(vec4 p1, vec4 s1, vec2 s2, vec2 d2) {\n    return vec2(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec3 convert_position(vec4 p1, vec4 s1, vec3 s2, vec3 d2) {\n    return vec3(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\nvec4 convert_position(vec4 p1, vec4 s1, vec4 s2, vec4 d2) {\n    return vec4(convert_position_i(p1, s1, s2, d2)) + 0.5;\n}\n\n\nvec2 convert_coord(vec2 p1, vec2 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec2 p1, vec2 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec2 convert_coord(vec4 p1, vec4 s1, vec2 s2, vec2 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\nvec4 convert_coord(vec4 p1, vec4 s1, vec4 s2, vec4 d2) { return fract((floor(dot(p1 - 0.5, s1) / s2) + 0.5) / d2); }\n\nuniform sampler2D A;\nuniform sampler2D B;\n\nuniform vec2 s_c;\nuniform vec2 d_C;\nuniform vec2 s_C;\n\nuniform vec2 d_a;\nuniform vec2 d_b;\n\nvoid main() {\n    ivec2 p_C = convert_position_i(gl_FragCoord.xy, s_c, s_C, d_C);\n    \n    int m = p_C.x;\n    int n = p_C.y;\n\n    float v = 0.0;\n\n    for (int k = 0; k < 36; k++) {\n        vec4 v_a = texture2D(A, fract((vec2(k, m) + 0.5) / d_a));\n        vec4 v_b = texture2D(B, fract((vec2(k, n) + 0.5) / d_b));\n\n        v += dot(v_a, v_b);\n    }\n\n    gl_FragColor = vec4(v, 0, 0, 0);\n}\n"
  },
  "exec_infos": [
    {
      "shader_name": "sgemm_7b6a34fc2f768654738764011c33f0367d6cb5a14554db852e4bcd88",
      "inputs": [
        {
          "variable_name": "ConstantVariable266",
          "value": 0
        },
        {
          "variable_name": "Variable360",
          "value": 1
        }
      ],
      "uniforms": {
        "d_b": {
          "type": "vec2",
          "value": [
            128,
            100
          ]
        },
        "d_a": {
          "type": "vec2",
          "value": [
            100,
            1
          ]
        },
        "s_C": {
          "type": "vec2",
          "value": [
            128,
            1
          ]
        },
        "d_C": {
          "type": "vec2",
          "value": [
            1,
            128
          ]
        },
        "s_c": {
          "type": "vec2",
          "value": [
            1,
            128
          ]
        },
        "B": {
          "type": "sampler2D",
          "value": 0
        },
        "A": {
          "type": "sampler2D",
          "value": 1
        }
      },
      "output": "Variable361"
    },
    {
      "shader_name": "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963",
      "inputs": [
        {
          "variable_name": "ConstantVariable267",
          "value": 0
        },
        {
          "variable_name": "Variable361",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            128,
            1,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            128
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            128,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            128,
            1,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            128
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            128,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            128,
            1,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            128
          ]
        }
      },
      "output": "Variable362"
    },
    {
      "shader_name": "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a",
      "inputs": [
        {
          "variable_name": "Variable362",
          "value": 0
        }
      ],
      "uniforms": {
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            128,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable363"
    },
    {
      "shader_name": "sgemm_f1f0a0317d0a05dc6fcdf94285cb71972521ae68a99923b188c4212e",
      "inputs": [
        {
          "variable_name": "ConstantVariable268",
          "value": 0
        },
        {
          "variable_name": "Variable363",
          "value": 1
        }
      ],
      "uniforms": {
        "d_b": {
          "type": "vec2",
          "value": [
            60,
            128
          ]
        },
        "d_a": {
          "type": "vec2",
          "value": [
            128,
            1
          ]
        },
        "s_C": {
          "type": "vec2",
          "value": [
            60,
            1
          ]
        },
        "d_C": {
          "type": "vec2",
          "value": [
            1,
            60
          ]
        },
        "s_c": {
          "type": "vec2",
          "value": [
            1,
            60
          ]
        },
        "B": {
          "type": "sampler2D",
          "value": 0
        },
        "A": {
          "type": "sampler2D",
          "value": 1
        }
      },
      "output": "Variable364"
    },
    {
      "shader_name": "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963",
      "inputs": [
        {
          "variable_name": "ConstantVariable269",
          "value": 0
        },
        {
          "variable_name": "Variable364",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            60,
            1,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            60
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            60,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            60,
            1,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            60
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            60,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            60,
            1,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            60
          ]
        }
      },
      "output": "Variable365"
    },
    {
      "shader_name": "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a",
      "inputs": [
        {
          "variable_name": "Variable365",
          "value": 0
        }
      ],
      "uniforms": {
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            60,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable366"
    },
    {
      "shader_name": "sgemm_8e61680a9d17f474ddcca73703dfef2ad11e56858575df840c9b9e6f",
      "inputs": [
        {
          "variable_name": "ConstantVariable270",
          "value": 0
        },
        {
          "variable_name": "Variable366",
          "value": 1
        }
      ],
      "uniforms": {
        "d_b": {
          "type": "vec2",
          "value": [
            240,
            60
          ]
        },
        "d_a": {
          "type": "vec2",
          "value": [
            60,
            1
          ]
        },
        "s_C": {
          "type": "vec2",
          "value": [
            240,
            1
          ]
        },
        "d_C": {
          "type": "vec2",
          "value": [
            1,
            240
          ]
        },
        "s_c": {
          "type": "vec2",
          "value": [
            1,
            240
          ]
        },
        "B": {
          "type": "sampler2D",
          "value": 0
        },
        "A": {
          "type": "sampler2D",
          "value": 1
        }
      },
      "output": "Variable367"
    },
    {
      "shader_name": "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963",
      "inputs": [
        {
          "variable_name": "ConstantVariable271",
          "value": 0
        },
        {
          "variable_name": "Variable367",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            240,
            1,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            240
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            240,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            240,
            1,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            240
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            240,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            240,
            1,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            240
          ]
        }
      },
      "output": "Variable368"
    },
    {
      "shader_name": "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a",
      "inputs": [
        {
          "variable_name": "Variable368",
          "value": 0
        }
      ],
      "uniforms": {
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            240,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable369"
    },
    {
      "shader_name": "sgemm_0c6a55f6b6212c47c90844ed8008be4ccd3c7b116ff331d69814a52a",
      "inputs": [
        {
          "variable_name": "ConstantVariable272",
          "value": 0
        },
        {
          "variable_name": "Variable369",
          "value": 1
        }
      ],
      "uniforms": {
        "d_b": {
          "type": "vec2",
          "value": [
            3840,
            240
          ]
        },
        "d_a": {
          "type": "vec2",
          "value": [
            240,
            1
          ]
        },
        "s_C": {
          "type": "vec2",
          "value": [
            3840,
            1
          ]
        },
        "d_C": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "s_c": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "B": {
          "type": "sampler2D",
          "value": 0
        },
        "A": {
          "type": "sampler2D",
          "value": 1
        }
      },
      "output": "Variable370"
    },
    {
      "shader_name": "elementwisemul_0843eb40eebccad40d17c8a426b64fe8d652bb725c8950854bc6bea1",
      "inputs": [
        {
          "variable_name": "ConstantVariable274",
          "value": 0
        },
        {
          "variable_name": "Variable370",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            3840,
            1,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            3840,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            3840,
            1,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            3840,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            3840,
            1,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        }
      },
      "output": "Variable403"
    },
    {
      "shader_name": "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963",
      "inputs": [
        {
          "variable_name": "ConstantVariable313",
          "value": 0
        },
        {
          "variable_name": "Variable403",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            3840,
            1,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            3840,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            3840,
            1,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            3840,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            3840,
            1,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        }
      },
      "output": "Variable373"
    },
    {
      "shader_name": "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a",
      "inputs": [
        {
          "variable_name": "Variable373",
          "value": 0
        }
      ],
      "uniforms": {
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            3840,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable374"
    },
    {
      "shader_name": "reshape_4c29b12b0d5407a59038acc11bd8c169f7e7e7758be69c25c9b25116",
      "inputs": [
        {
          "variable_name": "Variable374",
          "value": 0
        }
      ],
      "uniforms": {
        "s_x": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "d_x": {
          "type": "vec2",
          "value": [
            3840,
            1
          ]
        },
        "s_y": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "X": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable375"
    },
    {
      "shader_name": "im2col_bf18af203407aa8ca8842eedd9a394a955a522d5e39ea8fb17d0e394",
      "inputs": [
        {
          "variable_name": "Variable375",
          "value": 0
        }
      ],
      "uniforms": {
        "PW": {
          "type": "int",
          "value": 1
        },
        "PH": {
          "type": "int",
          "value": 1
        },
        "SW": {
          "type": "int",
          "value": 1
        },
        "SH": {
          "type": "int",
          "value": 1
        },
        "DW": {
          "type": "int",
          "value": 1
        },
        "DH": {
          "type": "int",
          "value": 1
        },
        "KW": {
          "type": "int",
          "value": 3
        },
        "KH": {
          "type": "int",
          "value": 3
        },
        "W1": {
          "type": "int",
          "value": 24
        },
        "H1": {
          "type": "int",
          "value": 40
        },
        "C1": {
          "type": "int",
          "value": 4
        },
        "s_Im": {
          "type": "vec4",
          "value": [
            3840,
            96,
            4,
            1
          ]
        },
        "d_Im": {
          "type": "vec4",
          "value": [
            1,
            40,
            24,
            4
          ]
        },
        "s_im": {
          "type": "vec2",
          "value": [
            1,
            3840
          ]
        },
        "d_im": {
          "type": "vec2",
          "value": [
            3840,
            1
          ]
        },
        "s_Col": {
          "type": "vec4",
          "value": [
            34560,
            864,
            36,
            1
          ]
        },
        "d_Col": {
          "type": "vec4",
          "value": [
            1,
            40,
            24,
            36
          ]
        },
        "s_col": {
          "type": "vec2",
          "value": [
            4,
            36
          ]
        },
        "im": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable410"
    },
    {
      "shader_name": "sgemm_b208349e276476df383e78bc4bdf95e8d2445feb65fc8bfe7fa85fb6",
      "inputs": [
        {
          "variable_name": "ConstantVariable314",
          "value": 0
        },
        {
          "variable_name": "Variable410",
          "value": 1
        }
      ],
      "uniforms": {
        "d_b": {
          "type": "vec2",
          "value": [
            9,
            128
          ]
        },
        "d_a": {
          "type": "vec2",
          "value": [
            9,
            960
          ]
        },
        "s_C": {
          "type": "vec2",
          "value": [
            128,
            1
          ]
        },
        "d_C": {
          "type": "vec2",
          "value": [
            960,
            128
          ]
        },
        "s_c": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "B": {
          "type": "sampler2D",
          "value": 0
        },
        "A": {
          "type": "sampler2D",
          "value": 1
        }
      },
      "output": "Variable376"
    },
    {
      "shader_name": "elementwisemul_0843eb40eebccad40d17c8a426b64fe8d652bb725c8950854bc6bea1",
      "inputs": [
        {
          "variable_name": "ConstantVariable278",
          "value": 0
        },
        {
          "variable_name": "Variable376",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            1,
            128,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            128
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            128,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            128,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            960,
            128,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            30
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            128,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            960,
            128,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        }
      },
      "output": "Variable400"
    },
    {
      "shader_name": "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963",
      "inputs": [
        {
          "variable_name": "ConstantVariable310",
          "value": 0
        },
        {
          "variable_name": "Variable400",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            1,
            128,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            128
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            128,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            128,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            960,
            128,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            30
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            128,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            960,
            128,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        }
      },
      "output": "Variable379"
    },
    {
      "shader_name": "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a",
      "inputs": [
        {
          "variable_name": "Variable379",
          "value": 0
        }
      ],
      "uniforms": {
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            30
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable380"
    },
    {
      "shader_name": "im2col_bf18af203407aa8ca8842eedd9a394a955a522d5e39ea8fb17d0e394",
      "inputs": [
        {
          "variable_name": "Variable380",
          "value": 0
        }
      ],
      "uniforms": {
        "PW": {
          "type": "int",
          "value": 1
        },
        "PH": {
          "type": "int",
          "value": 1
        },
        "SW": {
          "type": "int",
          "value": 1
        },
        "SH": {
          "type": "int",
          "value": 1
        },
        "DW": {
          "type": "int",
          "value": 1
        },
        "DH": {
          "type": "int",
          "value": 1
        },
        "KW": {
          "type": "int",
          "value": 3
        },
        "KH": {
          "type": "int",
          "value": 3
        },
        "W1": {
          "type": "int",
          "value": 24
        },
        "H1": {
          "type": "int",
          "value": 40
        },
        "C1": {
          "type": "int",
          "value": 128
        },
        "s_Im": {
          "type": "vec4",
          "value": [
            122880,
            3072,
            128,
            1
          ]
        },
        "d_Im": {
          "type": "vec4",
          "value": [
            1,
            40,
            24,
            128
          ]
        },
        "s_im": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "d_im": {
          "type": "vec2",
          "value": [
            4096,
            30
          ]
        },
        "s_Col": {
          "type": "vec4",
          "value": [
            1105920,
            27648,
            1152,
            1
          ]
        },
        "d_Col": {
          "type": "vec4",
          "value": [
            1,
            40,
            24,
            1152
          ]
        },
        "s_col": {
          "type": "vec2",
          "value": [
            4,
            1152
          ]
        },
        "im": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable412"
    },
    {
      "shader_name": "sgemm_e643fccc0088cd8cc9d77b91dc3ec081c2f6ed7270838453506f34bd",
      "inputs": [
        {
          "variable_name": "ConstantVariable315",
          "value": 0
        },
        {
          "variable_name": "Variable412",
          "value": 1
        }
      ],
      "uniforms": {
        "d_b": {
          "type": "vec2",
          "value": [
            288,
            32
          ]
        },
        "d_a": {
          "type": "vec2",
          "value": [
            288,
            960
          ]
        },
        "s_C": {
          "type": "vec2",
          "value": [
            32,
            1
          ]
        },
        "d_C": {
          "type": "vec2",
          "value": [
            960,
            32
          ]
        },
        "s_c": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "B": {
          "type": "sampler2D",
          "value": 0
        },
        "A": {
          "type": "sampler2D",
          "value": 1
        }
      },
      "output": "Variable381"
    },
    {
      "shader_name": "elementwisemul_0843eb40eebccad40d17c8a426b64fe8d652bb725c8950854bc6bea1",
      "inputs": [
        {
          "variable_name": "ConstantVariable282",
          "value": 0
        },
        {
          "variable_name": "Variable381",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            1,
            32,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            32
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            32,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            32,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            960,
            32,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            8
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            32,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            960,
            32,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        }
      },
      "output": "Variable397"
    },
    {
      "shader_name": "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963",
      "inputs": [
        {
          "variable_name": "ConstantVariable307",
          "value": 0
        },
        {
          "variable_name": "Variable397",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            1,
            32,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            32
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            32,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            32,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            960,
            32,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            8
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            32,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            960,
            32,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        }
      },
      "output": "Variable384"
    },
    {
      "shader_name": "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a",
      "inputs": [
        {
          "variable_name": "Variable384",
          "value": 0
        }
      ],
      "uniforms": {
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            8
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable385"
    },
    {
      "shader_name": "im2col_bf18af203407aa8ca8842eedd9a394a955a522d5e39ea8fb17d0e394",
      "inputs": [
        {
          "variable_name": "Variable385",
          "value": 0
        }
      ],
      "uniforms": {
        "PW": {
          "type": "int",
          "value": 1
        },
        "PH": {
          "type": "int",
          "value": 1
        },
        "SW": {
          "type": "int",
          "value": 1
        },
        "SH": {
          "type": "int",
          "value": 1
        },
        "DW": {
          "type": "int",
          "value": 1
        },
        "DH": {
          "type": "int",
          "value": 1
        },
        "KW": {
          "type": "int",
          "value": 3
        },
        "KH": {
          "type": "int",
          "value": 3
        },
        "W1": {
          "type": "int",
          "value": 24
        },
        "H1": {
          "type": "int",
          "value": 40
        },
        "C1": {
          "type": "int",
          "value": 32
        },
        "s_Im": {
          "type": "vec4",
          "value": [
            30720,
            768,
            32,
            1
          ]
        },
        "d_Im": {
          "type": "vec4",
          "value": [
            1,
            40,
            24,
            32
          ]
        },
        "s_im": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "d_im": {
          "type": "vec2",
          "value": [
            4096,
            8
          ]
        },
        "s_Col": {
          "type": "vec4",
          "value": [
            276480,
            6912,
            288,
            1
          ]
        },
        "d_Col": {
          "type": "vec4",
          "value": [
            1,
            40,
            24,
            288
          ]
        },
        "s_col": {
          "type": "vec2",
          "value": [
            4,
            288
          ]
        },
        "im": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable414"
    },
    {
      "shader_name": "sgemm_be6f3d0bfc479223892a338b15fbd40e56dc9512a524f1864c86cd0a",
      "inputs": [
        {
          "variable_name": "ConstantVariable316",
          "value": 0
        },
        {
          "variable_name": "Variable414",
          "value": 1
        }
      ],
      "uniforms": {
        "d_b": {
          "type": "vec2",
          "value": [
            72,
            16
          ]
        },
        "d_a": {
          "type": "vec2",
          "value": [
            72,
            960
          ]
        },
        "s_C": {
          "type": "vec2",
          "value": [
            16,
            1
          ]
        },
        "d_C": {
          "type": "vec2",
          "value": [
            960,
            16
          ]
        },
        "s_c": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "B": {
          "type": "sampler2D",
          "value": 0
        },
        "A": {
          "type": "sampler2D",
          "value": 1
        }
      },
      "output": "Variable386"
    },
    {
      "shader_name": "elementwisemul_0843eb40eebccad40d17c8a426b64fe8d652bb725c8950854bc6bea1",
      "inputs": [
        {
          "variable_name": "ConstantVariable286",
          "value": 0
        },
        {
          "variable_name": "Variable386",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            1,
            16,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            16
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            16,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            16,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            960,
            16,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            4
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            16,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            960,
            16,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        }
      },
      "output": "Variable394"
    },
    {
      "shader_name": "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963",
      "inputs": [
        {
          "variable_name": "ConstantVariable304",
          "value": 0
        },
        {
          "variable_name": "Variable394",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            1,
            16,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            16
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            16,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            16,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            960,
            16,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            4
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            16,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            960,
            16,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        }
      },
      "output": "Variable389"
    },
    {
      "shader_name": "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a",
      "inputs": [
        {
          "variable_name": "Variable389",
          "value": 0
        }
      ],
      "uniforms": {
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            4096,
            4
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable390"
    },
    {
      "shader_name": "im2col_bf18af203407aa8ca8842eedd9a394a955a522d5e39ea8fb17d0e394",
      "inputs": [
        {
          "variable_name": "Variable390",
          "value": 0
        }
      ],
      "uniforms": {
        "PW": {
          "type": "int",
          "value": 1
        },
        "PH": {
          "type": "int",
          "value": 1
        },
        "SW": {
          "type": "int",
          "value": 1
        },
        "SH": {
          "type": "int",
          "value": 1
        },
        "DW": {
          "type": "int",
          "value": 1
        },
        "DH": {
          "type": "int",
          "value": 1
        },
        "KW": {
          "type": "int",
          "value": 3
        },
        "KH": {
          "type": "int",
          "value": 3
        },
        "W1": {
          "type": "int",
          "value": 24
        },
        "H1": {
          "type": "int",
          "value": 40
        },
        "C1": {
          "type": "int",
          "value": 16
        },
        "s_Im": {
          "type": "vec4",
          "value": [
            15360,
            384,
            16,
            1
          ]
        },
        "d_Im": {
          "type": "vec4",
          "value": [
            1,
            40,
            24,
            16
          ]
        },
        "s_im": {
          "type": "vec2",
          "value": [
            1,
            4096
          ]
        },
        "d_im": {
          "type": "vec2",
          "value": [
            4096,
            4
          ]
        },
        "s_Col": {
          "type": "vec4",
          "value": [
            138240,
            3456,
            144,
            1
          ]
        },
        "d_Col": {
          "type": "vec4",
          "value": [
            1,
            40,
            24,
            144
          ]
        },
        "s_col": {
          "type": "vec2",
          "value": [
            4,
            144
          ]
        },
        "im": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable416"
    },
    {
      "shader_name": "sgemm_dc47d3b3cb5bfd62d19e9e4364684293048c98f032601cfd8a2e0d73",
      "inputs": [
        {
          "variable_name": "ConstantVariable317",
          "value": 0
        },
        {
          "variable_name": "Variable416",
          "value": 1
        }
      ],
      "uniforms": {
        "d_b": {
          "type": "vec2",
          "value": [
            36,
            3
          ]
        },
        "d_a": {
          "type": "vec2",
          "value": [
            36,
            960
          ]
        },
        "s_C": {
          "type": "vec2",
          "value": [
            3,
            1
          ]
        },
        "d_C": {
          "type": "vec2",
          "value": [
            960,
            3
          ]
        },
        "s_c": {
          "type": "vec2",
          "value": [
            1,
            2880
          ]
        },
        "B": {
          "type": "sampler2D",
          "value": 0
        },
        "A": {
          "type": "sampler2D",
          "value": 1
        }
      },
      "output": "Variable391"
    },
    {
      "shader_name": "elementwiseadd_30afc3ec75b3c547f44e699cd93b388f2c03680e2e90441d4f96d963",
      "inputs": [
        {
          "variable_name": "ConstantVariable289",
          "value": 0
        },
        {
          "variable_name": "Variable391",
          "value": 1
        }
      ],
      "uniforms": {
        "variable_stride_x1": {
          "type": "vec4",
          "value": [
            1,
            1,
            1,
            1
          ]
        },
        "variable_shape_x1": {
          "type": "vec4",
          "value": [
            1,
            3,
            1,
            1
          ]
        },
        "texture_stride_x1": {
          "type": "vec2",
          "value": [
            1,
            3
          ]
        },
        "texture_shape_x1": {
          "type": "vec2",
          "value": [
            3,
            1
          ]
        },
        "sampler_x1": {
          "type": "sampler2D",
          "value": 0
        },
        "variable_stride_x0": {
          "type": "vec4",
          "value": [
            3,
            1,
            1,
            1
          ]
        },
        "variable_shape_x0": {
          "type": "vec4",
          "value": [
            960,
            3,
            1,
            1
          ]
        },
        "texture_stride_x0": {
          "type": "vec2",
          "value": [
            1,
            2880
          ]
        },
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            2880,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 1
        },
        "variable_stride_y": {
          "type": "vec4",
          "value": [
            3,
            1,
            1,
            1
          ]
        },
        "variable_shape_y": {
          "type": "vec4",
          "value": [
            960,
            3,
            1,
            1
          ]
        },
        "texture_stride_y": {
          "type": "vec2",
          "value": [
            1,
            2880
          ]
        }
      },
      "output": "Variable392"
    },
    {
      "shader_name": "tanh_6d6abb40b2ea391ac98f9f609b70f71c541408b31f63fa3556c0bf8a",
      "inputs": [
        {
          "variable_name": "Variable392",
          "value": 0
        }
      ],
      "uniforms": {
        "texture_shape_x0": {
          "type": "vec2",
          "value": [
            2880,
            1
          ]
        },
        "sampler_x0": {
          "type": "sampler2D",
          "value": 0
        }
      },
      "output": "Variable393"
    }
  ],
  "constants_map": {
    "ConstantVariable266": {
      "byte_offset": 0,
      "size": 12800
    },
    "ConstantVariable267": {
      "byte_offset": 51200,
      "size": 128
    },
    "ConstantVariable268": {
      "byte_offset": 51712,
      "size": 7680
    },
    "ConstantVariable269": {
      "byte_offset": 82432,
      "size": 60
    },
    "ConstantVariable270": {
      "byte_offset": 82672,
      "size": 14400
    },
    "ConstantVariable271": {
      "byte_offset": 140272,
      "size": 240
    },
    "ConstantVariable272": {
      "byte_offset": 141232,
      "size": 921600
    },
    "ConstantVariable274": {
      "byte_offset": 3827632,
      "size": 3840
    },
    "ConstantVariable313": {
      "byte_offset": 3842992,
      "size": 3840
    },
    "ConstantVariable314": {
      "byte_offset": 3858352,
      "size": 4608
    },
    "ConstantVariable278": {
      "byte_offset": 3876784,
      "size": 128
    },
    "ConstantVariable310": {
      "byte_offset": 3877296,
      "size": 128
    },
    "ConstantVariable315": {
      "byte_offset": 3877808,
      "size": 36864
    },
    "ConstantVariable282": {
      "byte_offset": 4025264,
      "size": 32
    },
    "ConstantVariable307": {
      "byte_offset": 4025392,
      "size": 32
    },
    "ConstantVariable316": {
      "byte_offset": 4025520,
      "size": 4608
    },
    "ConstantVariable286": {
      "byte_offset": 4043952,
      "size": 16
    },
    "ConstantVariable304": {
      "byte_offset": 4044016,
      "size": 16
    },
    "ConstantVariable317": {
      "byte_offset": 4044080,
      "size": 432
    },
    "ConstantVariable289": {
      "byte_offset": 4045808,
      "size": 3
    }
  },
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}